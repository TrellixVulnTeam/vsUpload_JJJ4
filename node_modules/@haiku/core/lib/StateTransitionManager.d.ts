import { BytecodeStateType, CurveDefinition, IHaikuComponent } from './api';
export interface StateTransitionParameters {
    curve: CurveDefinition;
    duration: number;
    queue?: boolean;
    onComplete?: () => void;
}
export interface StateValues {
    [stateName: string]: BytecodeStateType;
}
export interface RunningStateTransition {
    transitionStart: StateValues;
    transitionEnd: StateValues;
    transitionParameter: StateTransitionParameters;
    startTime: number;
    endTime: number;
    duration: number;
}
export default class StateTransitionManager {
    private readonly component;
    private transitions;
    private clock;
    private states;
    constructor(component: IHaikuComponent);
    /**
     * Create a new state transition.
     */
    setState(transitionEnd: StateValues, parameter?: StateTransitionParameters): void;
    private setStates;
    private isExpired;
    /**
     * Should be called on every tick. It cleans expired state transitions
     * and execute interpolation of running state transitions.
     */
    tickStateTransitions(): void;
    /**
     * Delete every running transition
     */
    deleteAllStateTransitions(): void;
    readonly numQueuedTransitions: number;
}
