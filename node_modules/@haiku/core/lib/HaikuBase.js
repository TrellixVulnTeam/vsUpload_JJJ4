"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HaikuGlobal_1 = require("./HaikuGlobal");
exports.GLOBAL_LISTENER_KEY = '*';
exports.GENERIC_EVENT_KEY = 'event';
var upperCaseFirstLetter = function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
};
var camelize = function (str) {
    return str.replace(/\W+/g, ' ').replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
        return (index === 0) ? letter.toLowerCase() : letter.toUpperCase();
    }).replace(/\s+/g, '');
};
var upsertInstanceRegistry = function (className) {
    if (!HaikuGlobal_1.default.models[className]) {
        HaikuGlobal_1.default.models[className] = [];
    }
    return HaikuGlobal_1.default.models[className];
};
var getInstanceRegistry = function (instance) {
    var className = instance.getClassName();
    return upsertInstanceRegistry(className);
};
var addInstanceToGlobalModelRegistry = function (instance) {
    getInstanceRegistry(instance).push(instance);
    return ++HaikuGlobal_1.default.idCounter;
};
var removeInstanceFromGlobalModelRegistry = function (instance) {
    var registry = getInstanceRegistry(instance);
    for (var i = 0; i < registry.length; i++) {
        if (registry[i] === instance) {
            registry.splice(i, 1);
            return;
        }
    }
};
var HaikuBase = /** @class */ (function () {
    function HaikuBase() {
        this.cache = {};
        this.$id = addInstanceToGlobalModelRegistry(this);
        this.listeners = {};
    }
    HaikuBase.prototype.getId = function () {
        return this.$id;
    };
    HaikuBase.prototype.getPrimaryKey = function () {
        return this.getClassName() + ":" + this.getId();
    };
    HaikuBase.prototype.getClassName = function () {
        return this.constructor.__name__;
    };
    HaikuBase.prototype.cacheSet = function (key, value) {
        this.cache[key] = value;
    };
    HaikuBase.prototype.cacheGet = function (key) {
        return this.cache[key];
    };
    HaikuBase.prototype.cacheFetch = function (key, provider) {
        var valueExisting = this.cacheGet(key);
        if (valueExisting !== undefined) {
            return valueExisting;
        }
        var valueProvided = provider();
        this.cacheSet(key, valueProvided);
        return valueProvided;
    };
    HaikuBase.prototype.cacheUnset = function (key) {
        this.cache[key] = undefined;
    };
    HaikuBase.prototype.cacheClear = function () {
        this.cache = {};
    };
    HaikuBase.prototype.subcacheGet = function (key) {
        return this.cacheGet(key);
    };
    HaikuBase.prototype.subcacheEnsure = function (key) {
        if (!this.cacheGet(key)) {
            this.cacheSet(key, {});
        }
    };
    HaikuBase.prototype.subcacheClear = function (key) {
        this.cacheSet(key, {});
    };
    HaikuBase.prototype.on = function (key, listener) {
        if (!this.listeners[key]) {
            this.listeners[key] = [];
        }
        this.listeners[key].push(listener);
    };
    HaikuBase.prototype.addEventListener = function (key, listener) {
        this.on(key, listener);
    };
    HaikuBase.prototype.off = function (key, listener) {
        if (!this.listeners[key]) {
            return;
        }
        for (var i = this.listeners[key].length - 1; i >= 0; i--) {
            if (this.listeners[key][i] === listener) {
                this.listeners[key].splice(i, 1);
            }
        }
    };
    HaikuBase.prototype.removeEventListener = function (key, listener) {
        this.off(key, listener);
    };
    HaikuBase.prototype.removeListener = function (key, listener) {
        this.off(key, listener);
    };
    HaikuBase.prototype.emitToListeners = function (key, args) {
        if (this.listeners[key]) {
            for (var i = 0; i < this.listeners[key].length; i++) {
                this.listeners[key][i].apply(null, args);
            }
        }
    };
    HaikuBase.prototype.emitToGenericListeners = function (key, args) {
        if (this.listeners[exports.GLOBAL_LISTENER_KEY]) {
            for (var i = 0; i < this.listeners[exports.GLOBAL_LISTENER_KEY].length; i++) {
                this.listeners[exports.GLOBAL_LISTENER_KEY][i].apply(null, [key].concat(args));
            }
        }
    };
    HaikuBase.prototype.emitToAncestors = function (key) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return; // no-op; Implemented by subclass
    };
    HaikuBase.prototype.emit = function (key) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // Specific direct listeners (this.on('foo:bar'))
        this.emitToListeners(key, args);
        // Specific config object listeners (`onHaikuEventFooBar`)
        this.emitToConfigHandlers(key, args);
        // Generic direct listeners (this.on('*'))
        this.emitToGenericListeners(key, args);
        // Emit up the chain
        this.emitToAncestors.apply(this, [key].concat(args));
        var allArgs = [key].concat(args);
        // Generic config object listeners ('event', 'onEvent', 'onHaikuEvent')
        // for when the subscription name isn't known in advance, e.g. custom events
        this.emitToConfigHandlers(exports.GENERIC_EVENT_KEY, allArgs);
    };
    HaikuBase.prototype.emitToConfigHandlers = function (key, args) {
        if (!this.config) {
            return;
        }
        // 'somebody:Did-Thing' -> 'somebodyDidThing'
        var keyCamelCase = upperCaseFirstLetter(camelize(key));
        // 'somebodyDidThing' -> 'onSomebodyDidThing'
        var keyCamelCaseWithOnPrefix = "on" + keyCamelCase;
        if (typeof this.config[keyCamelCaseWithOnPrefix] === 'function') {
            this.config[keyCamelCaseWithOnPrefix].apply(null, args);
        }
        // 'somebodyDidThing' -> 'onHaikuSomebodyDidThing' (legacy)
        var keyCamelCaseWithOnHaikuPrefix = "onHaiku" + keyCamelCase;
        if (typeof this.config[keyCamelCaseWithOnHaikuPrefix] === 'function') {
            this.config[keyCamelCaseWithOnHaikuPrefix].apply(null, args);
        }
    };
    HaikuBase.prototype.matchesCriteria = function (criteria) {
        if (!criteria) {
            return false;
        }
        var answer = true;
        for (var key in criteria) {
            if (this[key] !== criteria[key]) {
                answer = false;
            }
        }
        return answer;
    };
    HaikuBase.prototype.destroy = function () {
        removeInstanceFromGlobalModelRegistry(this);
    };
    HaikuBase.getRegistryForClass = function (klass) {
        return upsertInstanceRegistry(klass.__name__);
    };
    return HaikuBase;
}());
exports.default = HaikuBase;
//# sourceMappingURL=HaikuBase.js.map