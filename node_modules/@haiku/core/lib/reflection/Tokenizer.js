"use strict";
/**
 * Copyright (c) Haiku 2016-2018. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenize = function (source, regexps) {
    var tokens = [];
    var chunk = source;
    var total = chunk.length;
    var iterations = 0;
    while (chunk.length > 0) {
        for (var i = 0; i < regexps.length; i++) {
            var regexp = regexps[i];
            var match = regexp.re.exec(chunk);
            if (match) {
                var value = match[0];
                tokens.push({ value: value, type: regexp.type });
                // Need to slice the chunk at the value match length
                chunk = chunk.slice(match[0].length, chunk.length);
                break;
            }
        }
        // We've probably failed to parse correctly if we get here
        if (iterations++ > total) {
            throw new Error("Unable to tokenize expression " + source);
        }
    }
    return tokens;
};
// Order matters
var PARAMETERS_REGEXPS = [
    { type: 'whitespace', re: /^[\s]+/ },
    { type: 'paren_open', re: /^\(/ },
    { type: 'paren_close', re: /^\)/ },
    { type: 'square_open', re: /^\[/ },
    { type: 'square_close', re: /^]/ },
    { type: 'curly_open', re: /^\{/ },
    { type: 'curly_close', re: /^\}/ },
    { type: 'rest', re: /^\.\.\./ },
    { type: 'colon', re: /^:/ },
    { type: 'comma', re: /^,/ },
    { type: 'identifier', re: /^[a-zA-Z0-9_$]+/ },
];
exports.tokenizeParameters = function (source) {
    return exports.tokenize(source, PARAMETERS_REGEXPS);
};
var SYMBOLS = '~!@#$%^&*-_=+/|:\'<,>.?'.split('').join('\\');
var DIRECTIVE_REGEXPS = [
    { type: 'whitespace', re: /^[\s]+/ },
    { type: 'paren_open', re: /^\(/ },
    { type: 'paren_close', re: /^\)/ },
    // If you want to count -123 as a negative number, use ^-?\d at column 56
    { type: 'number', re: /^0b[01]+|^0o[0-7]+|^0x[\da-f]+|^\d*\.?\d+(?:e[+-]?\d+)?/i },
    { type: 'symbol', re: new RegExp('^([$' + SYMBOLS + '][$' + SYMBOLS + ']*)([^\\n\\S]*:(?!:))?') },
    { type: 'identifier', re: new RegExp('^([$A-Za-z_\\x7f-\\uffff][$\\w\\x7f-\\uffff]*)([^\\n\\S]*:(?!:))?') },
];
exports.tokenizeDirective = function (source) {
    var tokens = exports.tokenize(source, DIRECTIVE_REGEXPS).filter(function (token) {
        return token.type !== 'whitespace';
    });
    tokens.forEach(function (token) {
        if (token.type === 'number') {
            token.value = Number(token.value);
        }
    });
    return tokens;
};
exports.isNumeric = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};
//# sourceMappingURL=Tokenizer.js.map