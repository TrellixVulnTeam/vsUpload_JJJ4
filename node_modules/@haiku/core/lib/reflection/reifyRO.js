"use strict";
/**
 * Copyright (c) Haiku 2016-2018. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var expressionToRO_1 = require("./expressionToRO");
var isSerializableScalar_1 = require("./isSerializableScalar");
var reifyRFO_1 = require("./reifyRFO");
var OBJECT = 'object';
var FUNCTION = 'function';
// The inverse of this function is 'expressionToRO'
function reifyRO(robj, referenceEvaluator, skipFunctions) {
    if (robj === undefined) {
        return undefined;
    }
    if (typeof robj === FUNCTION) {
        // More or less, clone the function and strip off any properties that may have been
        // applied to it at runtime for e.g. caching, which we don't want hanging around the new copy.
        // Note that we *cannot* just call fn.bind({}) here because then newfn.toString() would
        // return a string like "function () { [native code] }" which we can then not parse!
        return reifyRO(expressionToRO_1.default(robj, null), referenceEvaluator, skipFunctions);
    }
    if (isSerializableScalar_1.default(robj)) {
        return robj;
    }
    if (Array.isArray(robj)) {
        var aout = [];
        for (var i = 0; i < robj.length; i++) {
            aout[i] = reifyRO(robj[i], referenceEvaluator, skipFunctions);
        }
        return aout;
    }
    if (typeof robj === OBJECT) {
        // Special reference object
        if (robj.__value !== undefined) {
            return reifyRO(robj.__value, referenceEvaluator, skipFunctions);
        }
        if (robj.__function) {
            // The caller might want to reassemble this on their own
            if (skipFunctions) {
                return robj;
            }
            return reifyRFO_1.default(robj.__function);
        }
        if (robj.__reference) {
            if (referenceEvaluator) {
                return referenceEvaluator(robj.__reference);
            }
            throw new Error('Reference evaluator required');
        }
        // Normal object
        var oout = {};
        for (var key in robj) {
            oout[key] = reifyRO(robj[key], referenceEvaluator, skipFunctions);
        }
        return oout;
    }
    return undefined;
}
exports.default = reifyRO;
//# sourceMappingURL=reifyRO.js.map