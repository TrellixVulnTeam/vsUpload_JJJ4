"use strict";
/**
 * Copyright (c) Haiku 2016-2018. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var interactionModes_1 = require("./helpers/interactionModes");
exports.DEFAULTS = {
    alwaysComputeSizing: false,
    automount: true,
    autoplay: true,
    children: null,
    clock: {},
    contextMenu: 'enabled',
    eventHandlers: null,
    folder: null,
    forceFlush: false,
    frame: null,
    freeze: false,
    helpers: null,
    hooks: null,
    interactionMode: interactionModes_1.InteractionMode.LIVE,
    loop: false,
    mixpanel: '6f31d4f99cf71024ce27c3e404a79a61',
    overflow: null,
    overflowX: null,
    overflowY: null,
    placeholder: null,
    position: 'relative',
    preserve3d: 'auto',
    seed: null,
    sizing: null,
    states: null,
    timelines: null,
    timestamp: null,
    vanities: null,
};
/**
 * Configuration from HaikuContext is forwarded to all HaikuComponent instances in its tree.
 * For child instances, certain settings (such as `loop`) give unexpected behavior and
 * other settings (such as `states`) don't make much sense to pass down. This specifies the
 * settings that are considered safe to forward from the context to all subcomponents.
 */
var CHILD_SAFE_CONFIG = {
    alwaysComputeSizing: true,
    clock: true,
    contextMenu: true,
    folder: true,
    freeze: true,
    interactionMode: true,
    mixpanel: true,
    overflow: true,
    overflowX: true,
    overflowY: true,
    preserve3d: true,
    seed: true,
    sizing: true,
    timestamp: true,
};
var buildChildSafeConfig = function (config) {
    var out = {};
    for (var key in config) {
        if (CHILD_SAFE_CONFIG[key]) {
            out[key] = config[key];
        }
    }
    return out;
};
function seed() {
    return Math.random().toString(36).slice(2);
}
var CONFIG_KEYS_TO_MERGE = {
    states: true,
    eventHandlers: true,
    timelines: true,
    helpers: true,
    vanities: true,
    initialStates: true,
};
function build() {
    var argums = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        argums[_i] = arguments[_i];
    }
    var config = {};
    var args = argums.slice();
    args.unshift(exports.DEFAULTS);
    args.forEach(function (incoming) {
        if (!incoming || typeof incoming !== 'object') {
            return;
        }
        for (var key in incoming) {
            if (incoming[key] === undefined) {
                continue;
            }
            if (CONFIG_KEYS_TO_MERGE[key]) {
                if (!config[key]) {
                    config[key] = {};
                }
                config[key] = __assign({}, config[key], incoming[key]);
            }
            else {
                config[key] = incoming[key];
            }
        }
    });
    // Validations
    if (config.overflow && (config.overflowX || config.overflowY)) {
        console.warn('[haiku core] `overflow` overrides `overflowY`/`overflowX`');
        config.overflowX = null;
        config.overflowY = null;
    }
    return config;
}
exports.default = {
    build: build,
    seed: seed,
    DEFAULTS: exports.DEFAULTS,
    buildChildSafeConfig: buildChildSafeConfig,
};
//# sourceMappingURL=Config.js.map