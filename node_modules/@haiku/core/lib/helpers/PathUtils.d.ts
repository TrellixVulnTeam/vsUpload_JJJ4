import { CurveSpec } from '../vendor/svg-points/types';
export interface Vec2 {
    x: number;
    y: number;
}
export interface Vec4 {
    x: number;
    y: number;
    z: number;
    w: number;
}
export declare const splitSegmentInSVGPoints: (points: CurveSpec[], pt1Index: number, pt2Index: number, t: number) => void;
export declare const cubicBezierSplit: (t: number, anchor1: Vec2, handle1: Vec2, handle2: Vec2, anchor2: Vec2) => [[Vec2, Vec2, Vec2, Vec2], [Vec2, Vec2, Vec2, Vec2]];
export declare const distance: (a: Vec2, b: Vec2) => number;
export declare const mat4_multiply_vec4: (m: number[], v: Vec4) => Vec4;
export declare const polygonArea: (points: Vec2[]) => number;
export declare const polygonLength: (points: Vec2[]) => number;
export declare const distributeTotalVertices: (path: CurveSpec[], totalVertices: number) => void;
export declare const rotatePathForSmallestDistance: (source: CurveSpec[], dest: CurveSpec[]) => void;
export declare const ensurePathClockwise: (path: CurveSpec[]) => void;
export declare const normalizePointCurves: (path: CurveSpec[]) => void;
export declare const isMultiShape: (path: CurveSpec[]) => boolean;
export declare const synchronizePathStructure: (...paths: CurveSpec[][]) => void;
