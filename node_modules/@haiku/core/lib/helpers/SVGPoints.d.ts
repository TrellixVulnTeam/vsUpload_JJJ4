/**
 * Copyright (c) Haiku 2016-2018. All rights reserved.
 */
import { BytecodeNode } from '../api';
import { CurveSpec } from '../vendor/svg-points/types';
declare function polyPointsStringToPoints(pointsString: string | [number, number][]): any[];
declare function pointsToPolyString(points: string | string[][]): string;
declare function rectToPoints(x: number, y: number, width: number, height: number, rxIn: number, ryIn: number): ({
    y: number;
    x: number;
    moveTo: boolean;
    curve?: undefined;
    closed?: undefined;
} | {
    y: number;
    x: number;
    moveTo?: undefined;
    curve?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
    closed?: undefined;
} | {
    y: number;
    x: number;
    closed: boolean;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
})[] | ({
    x: number;
    y: number;
    moveTo: boolean;
    closed?: undefined;
} | {
    y: number;
    x: number;
    moveTo?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    closed: boolean;
    moveTo?: undefined;
})[];
declare function circleToPoints(cx: number, cy: number, r: number): ({
    x: number;
    y: number;
    moveTo: boolean;
    curve?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    closed: boolean;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
})[];
declare function ellipseToPoints(cx: number, cy: number, rx: number, ry: number): ({
    x: number;
    y: number;
    moveTo: boolean;
    curve?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
    closed?: undefined;
} | {
    x: number;
    y: number;
    closed: boolean;
    curve: {
        type: string;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    moveTo?: undefined;
})[];
declare function lineToPoints(x1: number, y1: number, x2: number, y2: number): CurveSpec[];
declare function pathToPoints(pathString: string): CurveSpec[];
declare function pointsToPath(pointsArray: any): string;
declare function manaToPoints(mana: BytecodeNode): CurveSpec[];
declare const _default: {
    rectToPoints: typeof rectToPoints;
    circleToPoints: typeof circleToPoints;
    ellipseToPoints: typeof ellipseToPoints;
    lineToPoints: typeof lineToPoints;
    pathToPoints: typeof pathToPoints;
    pointsToPath: typeof pointsToPath;
    polyPointsStringToPoints: typeof polyPointsStringToPoints;
    pointsToPolyString: typeof pointsToPolyString;
    manaToPoints: typeof manaToPoints;
};
export default _default;
