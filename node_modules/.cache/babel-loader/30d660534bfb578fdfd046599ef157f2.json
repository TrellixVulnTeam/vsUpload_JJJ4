{"ast":null,"code":"import gsap from\"gsap\";import ScrollTrigger from\"gsap/ScrollTrigger\";import{useEffect}from\"react\";import LocomotiveScroll from\"locomotive-scroll\";import\"locomotive-scroll/src/locomotive-scroll.scss\";gsap.registerPlugin(ScrollTrigger);export default function useLocoScroll(start){useEffect(function(){if(!start)return;var locoScroll=null;var scrollEl=document.querySelector(\"#main-container\");locoScroll=new LocomotiveScroll({el:scrollEl,smooth:true,multiplier:1,class:\"is-reveal\"});locoScroll.on(\"scroll\",function(){ScrollTrigger.update();});ScrollTrigger.scrollerProxy(scrollEl,{scrollTop:function scrollTop(value){if(locoScroll){return arguments.length?locoScroll.scrollTo(value,0,0):locoScroll.scroll.instance.scroll.y;}return null;},scrollLeft:function scrollLeft(value){if(locoScroll){return arguments.length?locoScroll.scrollTo(value,0,0):locoScroll.scroll.instance.scroll.x;}return null;}});var lsUpdate=function lsUpdate(){if(locoScroll){locoScroll.update();}};ScrollTrigger.addEventListener(\"refresh\",lsUpdate);ScrollTrigger.refresh();return function(){if(locoScroll){ScrollTrigger.removeEventListener(\"refresh\",lsUpdate);locoScroll.destroy();locoScroll=null;console.log(\"Kill\",locoScroll);}};},[start]);}","map":{"version":3,"sources":["/Users/stephensheldon/Documents/Coding/React/react-router-portfolio/router-portfolio/src/hooks/useLocoScroll.js"],"names":["gsap","ScrollTrigger","useEffect","LocomotiveScroll","registerPlugin","useLocoScroll","start","locoScroll","scrollEl","document","querySelector","el","smooth","multiplier","class","on","update","scrollerProxy","scrollTop","value","arguments","length","scrollTo","scroll","instance","y","scrollLeft","x","lsUpdate","addEventListener","refresh","removeEventListener","destroy","console","log"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,mBAA7B,CACA,MAAO,8CAAP,CAEAH,IAAI,CAACI,cAAL,CAAoBH,aAApB,EAEA,cAAe,SAASI,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC3CJ,SAAS,CAAC,UAAM,CACd,GAAI,CAACI,KAAL,CAAY,OACZ,GAAIC,CAAAA,UAAU,CAAG,IAAjB,CAEA,GAAMC,CAAAA,QAAQ,CAAGC,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAjB,CAEAH,UAAU,CAAG,GAAIJ,CAAAA,gBAAJ,CAAqB,CAChCQ,EAAE,CAAEH,QAD4B,CAEhCI,MAAM,CAAE,IAFwB,CAGhCC,UAAU,CAAE,CAHoB,CAIhCC,KAAK,CAAE,WAJyB,CAArB,CAAb,CAOAP,UAAU,CAACQ,EAAX,CAAc,QAAd,CAAwB,UAAM,CAC5Bd,aAAa,CAACe,MAAd,GACD,CAFD,EAIAf,aAAa,CAACgB,aAAd,CAA4BT,QAA5B,CAAsC,CACpCU,SADoC,oBAC1BC,KAD0B,CACnB,CACf,GAAIZ,UAAJ,CAAgB,CACd,MAAOa,CAAAA,SAAS,CAACC,MAAV,CACHd,UAAU,CAACe,QAAX,CAAoBH,KAApB,CAA2B,CAA3B,CAA8B,CAA9B,CADG,CAEHZ,UAAU,CAACgB,MAAX,CAAkBC,QAAlB,CAA2BD,MAA3B,CAAkCE,CAFtC,CAGD,CACD,MAAO,KAAP,CACD,CARmC,CASpCC,UAToC,qBASzBP,KATyB,CASlB,CAChB,GAAIZ,UAAJ,CAAgB,CACd,MAAOa,CAAAA,SAAS,CAACC,MAAV,CACHd,UAAU,CAACe,QAAX,CAAoBH,KAApB,CAA2B,CAA3B,CAA8B,CAA9B,CADG,CAEHZ,UAAU,CAACgB,MAAX,CAAkBC,QAAlB,CAA2BD,MAA3B,CAAkCI,CAFtC,CAGD,CACD,MAAO,KAAP,CACD,CAhBmC,CAAtC,EAmBA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAIrB,UAAJ,CAAgB,CACdA,UAAU,CAACS,MAAX,GACD,CACF,CAJD,CAMAf,aAAa,CAAC4B,gBAAd,CAA+B,SAA/B,CAA0CD,QAA1C,EACA3B,aAAa,CAAC6B,OAAd,GAEA,MAAO,WAAM,CACX,GAAIvB,UAAJ,CAAgB,CACdN,aAAa,CAAC8B,mBAAd,CAAkC,SAAlC,CAA6CH,QAA7C,EACArB,UAAU,CAACyB,OAAX,GACAzB,UAAU,CAAG,IAAb,CACA0B,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoB3B,UAApB,EACD,CACF,CAPD,CAQD,CArDQ,CAqDN,CAACD,KAAD,CArDM,CAAT,CAsDD","sourcesContent":["import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport { useEffect } from \"react\";\nimport LocomotiveScroll from \"locomotive-scroll\";\nimport \"locomotive-scroll/src/locomotive-scroll.scss\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default function useLocoScroll(start) {\n  useEffect(() => {\n    if (!start) return;\n    let locoScroll = null;\n\n    const scrollEl = document.querySelector(\"#main-container\");\n\n    locoScroll = new LocomotiveScroll({\n      el: scrollEl,\n      smooth: true,\n      multiplier: 1,\n      class: \"is-reveal\",\n    });\n\n    locoScroll.on(\"scroll\", () => {\n      ScrollTrigger.update();\n    });\n\n    ScrollTrigger.scrollerProxy(scrollEl, {\n      scrollTop(value) {\n        if (locoScroll) {\n          return arguments.length\n            ? locoScroll.scrollTo(value, 0, 0)\n            : locoScroll.scroll.instance.scroll.y;\n        }\n        return null;\n      },\n      scrollLeft(value) {\n        if (locoScroll) {\n          return arguments.length\n            ? locoScroll.scrollTo(value, 0, 0)\n            : locoScroll.scroll.instance.scroll.x;\n        }\n        return null;\n      },\n    });\n\n    const lsUpdate = () => {\n      if (locoScroll) {\n        locoScroll.update();\n      }\n    };\n\n    ScrollTrigger.addEventListener(\"refresh\", lsUpdate);\n    ScrollTrigger.refresh();\n\n    return () => {\n      if (locoScroll) {\n        ScrollTrigger.removeEventListener(\"refresh\", lsUpdate);\n        locoScroll.destroy();\n        locoScroll = null;\n        console.log(\"Kill\", locoScroll);\n      }\n    };\n  }, [start]);\n}\n"]},"metadata":{},"sourceType":"module"}