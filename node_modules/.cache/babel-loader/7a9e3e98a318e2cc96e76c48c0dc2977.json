{"ast":null,"code":"var _jsxFileName = \"/Users/stephensheldon/Documents/Coding/React/react-router-portfolio/router-portfolio/src/components/workMenu/index.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport useOnScreen from \"../../hooks/useOnScreen\";\nimport gsap from \"gsap\";\nimport SplitText from \"../../utils/Split3.min\";\nimport cn from \"classnames\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./style.scss\";\nimport SectionHeader from \"../SectionHeader/SectionHeader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function SectionMenuItem({\n  lineContent,\n  lineContent2,\n  toPath\n}) {\n  _s();\n\n  const ref = useRef(null); // const [reveal, setReveal] = useState(false);\n  // const onScreen = useOnScreen(ref);\n  // useEffect(() => {\n  //   if (onScreen) setReveal(onScreen);\n  // }, [onScreen]);\n  // useEffect(()=>{\n  //   const split = new SplitText(\"#sectionMenu\", {\n  //     type: 'lines',\n  //     linesClass: 'lineChildren'\n  //   });\n  //   gsap.to(split.lines, {\n  //     duration: .5,\n  //     y: 0,\n  //     opacity: 1,\n  //     stagger: 0.1,\n  //     ease: 'power2',\n  //   })\n  // },[reveal]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(\"sectionMenuItem\"\n    /* { \"is-reveal\": reveal } */\n    ),\n    id: \"sectionMenuItem\",\n    \"data-scroll-section\": true,\n    children: /*#__PURE__*/_jsxDEV(NavLink, {\n      ref: ref,\n      className: \"link link--elara\",\n      to: toPath,\n      className: cn(\"link link--elara\"),\n      activeStyle: {\n        fontWeight: \"bold\",\n        color: \"#E07A5F\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"section-menu-animate\",\n        children: lineContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"section-menu-animate\",\n        children: lineContent2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"section-menu-animate\",\n        className: \"solid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SectionMenuItem, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = SectionMenuItem;\nexport default function SectionMenu({\n  menuItems\n}) {\n  _s2();\n\n  useEffect(() => {\n    const split = new SplitText(\"#section-menu-animate\", {\n      type: 'lines',\n      linesClass: 'lineChildren'\n    });\n    const line = new SplitText(\"#section-menu-animate\", {\n      type: 'lines',\n      linesClass: 'lineParent'\n    });\n    gsap.to(split.lines, {\n      duration: .8,\n      y: 0,\n      opacity: 1,\n      stagger: 0.1,\n      ease: 'power2'\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: menuItems.map(({\n      h1,\n      h2,\n      to\n    }) => /*#__PURE__*/_jsxDEV(SectionMenuItem, {\n      lineContent: h1,\n      lineContent2: h2,\n      toPath: to\n    }, to, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n\n_s2(SectionMenu, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = SectionMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SectionMenuItem\");\n$RefreshReg$(_c2, \"SectionMenu\");","map":{"version":3,"sources":["/Users/stephensheldon/Documents/Coding/React/react-router-portfolio/router-portfolio/src/components/workMenu/index.jsx"],"names":["React","useEffect","useRef","useState","useOnScreen","gsap","SplitText","cn","NavLink","SectionHeader","SectionMenuItem","lineContent","lineContent2","toPath","ref","fontWeight","color","SectionMenu","menuItems","split","type","linesClass","line","to","lines","duration","y","opacity","stagger","ease","map","h1","h2"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAGA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAGA,OAAO,cAAP;AACA,OAAOC,aAAP,MAA0B,mCAA1B;;;AAKA,OAAO,SAASC,eAAT,CAAyB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,CAAzB,EAAgE;AAAA;;AACrE,QAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAD,CAAlB,CADqE,CAErE;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEK,EAAE,CAAC;AAAmB;AAApB,KAAlB;AACI,IAAA,EAAE,EAAC,iBADP;AAEI,+BAFJ;AAAA,2BAIM,QAAC,OAAD;AAAS,MAAA,GAAG,EAAEO,GAAd;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,EAAE,EAAED,MAFN;AAGE,MAAA,SAAS,EAAEN,EAAE,CAAC,kBAAD,CAHf;AAIE,MAAA,WAAW,EAAE;AACXQ,QAAAA,UAAU,EAAE,MADD;AAEXC,QAAAA,KAAK,EAAE;AAFI,OAJf;AAAA,8BASE;AAAI,QAAA,EAAE,EAAC,sBAAP;AAAA,kBAA+BL;AAA/B;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAI,QAAA,EAAE,EAAC,sBAAP;AAAA,kBAA+BC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AAAG,QAAA,EAAE,EAAC,sBAAN;AAA6B,QAAA,SAAS,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJN;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAnDeF,e;;KAAAA,e;AAyDhB,eAAe,SAASO,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAkC;AAAA;;AAG/CjB,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMkB,KAAK,GAAG,IAAIb,SAAJ,CAAc,uBAAd,EAAuC;AACnDc,MAAAA,IAAI,EAAE,OAD6C;AAEnDC,MAAAA,UAAU,EAAE;AAFuC,KAAvC,CAAd;AAKA,UAAMC,IAAI,GAAG,IAAIhB,SAAJ,CAAc,uBAAd,EAAuC;AAClDc,MAAAA,IAAI,EAAE,OAD4C;AAElDC,MAAAA,UAAU,EAAE;AAFsC,KAAvC,CAAb;AAKAhB,IAAAA,IAAI,CAACkB,EAAL,CAAQJ,KAAK,CAACK,KAAd,EAAqB;AACnBC,MAAAA,QAAQ,EAAE,EADS;AAEnBC,MAAAA,CAAC,EAAE,CAFgB;AAGnBC,MAAAA,OAAO,EAAE,CAHU;AAInBC,MAAAA,OAAO,EAAE,GAJU;AAKnBC,MAAAA,IAAI,EAAE;AALa,KAArB;AAOD,GAlBQ,EAkBP,EAlBO,CAAT;AAqBA,sBACE;AAAA,cACGX,SAAS,CAACY,GAAV,CAAc,CAAC;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,EAAN;AAAUT,MAAAA;AAAV,KAAD,kBACb,QAAC,eAAD;AAA0B,MAAA,WAAW,EAAEQ,EAAvC;AAA2C,MAAA,YAAY,EAAEC,EAAzD;AAA6D,MAAA,MAAM,EAAET;AAArE,OAAsBA,EAAtB;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAOD;;IA/BuBN,W;;MAAAA,W","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport useOnScreen from \"../../hooks/useOnScreen\";\n\n\nimport gsap from \"gsap\";\nimport SplitText from \"../../utils/Split3.min\";\nimport cn from \"classnames\";\nimport { NavLink } from \"react-router-dom\";\n\n\nimport \"./style.scss\";\nimport SectionHeader from \"../SectionHeader/SectionHeader.js\";\n\n\n\n\nexport function SectionMenuItem({ lineContent, lineContent2, toPath }) {\n  const ref = useRef(null);\n  // const [reveal, setReveal] = useState(false);\n\n  // const onScreen = useOnScreen(ref);\n\n  // useEffect(() => {\n  //   if (onScreen) setReveal(onScreen);\n  // }, [onScreen]);\n  \n  // useEffect(()=>{\n  //   const split = new SplitText(\"#sectionMenu\", {\n  //     type: 'lines',\n  //     linesClass: 'lineChildren'\n  //   });\n\n\n  //   gsap.to(split.lines, {\n  //     duration: .5,\n  //     y: 0,\n  //     opacity: 1,\n  //     stagger: 0.1,\n  //     ease: 'power2',\n\n\n\n  //   })\n  // },[reveal]);\n\n\n\n  return (\n    <div className={cn(\"sectionMenuItem\", /* { \"is-reveal\": reveal } */)}\n        id=\"sectionMenuItem\"\n        data-scroll-section> \n\n          <NavLink ref={ref} \n            className=\"link link--elara\"\n            to={toPath}\n            className={cn(\"link link--elara\")}\n            activeStyle={{\n              fontWeight: \"bold\",\n              color: \"#E07A5F\",\n            }}\n          > \n            <h1 id=\"section-menu-animate\">{lineContent}</h1>\n            <h2 id=\"section-menu-animate\">{lineContent2}</h2>\n            <p id=\"section-menu-animate\" className=\"solid\"></p>\n          </NavLink>\n    </div>\n  )\n}\n\n\n\n\n\nexport default function SectionMenu({menuItems}) {\n\n\n  useEffect(()=>{\n    const split = new SplitText(\"#section-menu-animate\", {\n      type: 'lines',\n      linesClass: 'lineChildren'\n    });\n\n    const line = new SplitText(\"#section-menu-animate\", {\n      type: 'lines',\n      linesClass: 'lineParent'\n    })\n\n    gsap.to(split.lines, {\n      duration: .8,\n      y: 0,\n      opacity: 1,\n      stagger: 0.1,\n      ease: 'power2',\n    })\n  },[]);\n\n\n  return (\n    <>\n      {menuItems.map(({ h1, h2, to }) => (\n        <SectionMenuItem key={to} lineContent={h1} lineContent2={h2} toPath={to}/> \n      ))}\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}